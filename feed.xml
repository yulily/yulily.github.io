<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-02-27T15:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Regional Scrum Gathering Tokyo 2015 Day 1</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/02/28/article.html"/>
    <id>http://blog.url.com/blog/2015/02/28/article.html</id>
    <published>2015-02-27T15:00:00Z</published>
    <updated>2015-03-02T23:59:07+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;ビスケットの日ですが、スクラム祭りに行って来ました。&lt;/p&gt;

&lt;p&gt;具体的な内容が多く実践してみたいものが多くありました。&lt;/p&gt;

&lt;h2&gt;1A-1アジャイルRCA アジャイルに無駄とその原因を見つける&lt;/h2&gt;

&lt;h3&gt;RCA ( Root Cause Analysis&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;要因分析&lt;/li&gt;
&lt;li&gt;5WHYS&lt;/li&gt;
&lt;li&gt;市場で大問題が起こったときの再発防止策を考える時に使う&lt;/li&gt;
&lt;li&gt;品質改善に有効な情報を与えるツール&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;これまでは、なぜなぜ分析を使っていた&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;問題点&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;時間がかかる

&lt;ul&gt;
&lt;li&gt;資料準備&lt;/li&gt;
&lt;li&gt;分析のテンプレートレビュー&lt;/li&gt;
&lt;li&gt;1度では終わらない&lt;/li&gt;
&lt;li&gt;トータル8hかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;責められる

&lt;ul&gt;
&lt;li&gt;ストレスを感じる分析&lt;/li&gt;
&lt;li&gt;何故は最強の質問&lt;/li&gt;
&lt;li&gt;過ちを犯した人を攻撃してしまう&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心理的に感じる責められてる順番&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Why&lt;/li&gt;
&lt;li&gt;How What&lt;/li&gt;
&lt;li&gt;Where Which When Who&lt;/li&gt;
&lt;li&gt;Closed-ended(yes/no)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;ソフトウェアはバグが欠陥で、対象はエンジニア&lt;/li&gt;
&lt;li&gt;バグをどう思っているか

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;バグは憎むべき物か&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;詰問に対する反応

&lt;ul&gt;
&lt;li&gt;防御モードが起こる&lt;/li&gt;
&lt;li&gt;深層を探ることよりも自分の答えを正当化しようとする&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本当は真の要因が知りたいのに、見かけの要因にいってしまう&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;強力なしりとりで隠し、違う所へ行ってしまう&lt;/li&gt;
&lt;li&gt;強力な質問から適切な質問をするのが大切&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スキルが上がらない

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;時間がかかる⇒分析の回数が減り、分析スキルが向上しない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;適切な質問を考えだすことができない&lt;/li&gt;
&lt;li&gt;真の要因に辿り着かない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改善&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;イテレーティブRCA

&lt;ul&gt;
&lt;li&gt;RCAミーティング15~30分&lt;/li&gt;
&lt;li&gt;準備資料は求めない&lt;/li&gt;
&lt;li&gt;毎日同じ時間に&lt;/li&gt;
&lt;li&gt;ミーティング後次の質問を考える

&lt;ul&gt;
&lt;li&gt;質問策定に時間がかけられる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;イテレーティブRCAループをひたすら繰り返す

&lt;ul&gt;
&lt;li&gt;適切な質問&lt;/li&gt;
&lt;li&gt;適切な回答&lt;/li&gt;
&lt;li&gt;回答の議論&lt;/li&gt;
&lt;li&gt;適切な方向、方針&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;イテレーティブRCAの問題

&lt;ul&gt;
&lt;li&gt;質問がうまくだせない&lt;br&gt;&lt;/li&gt;
&lt;li&gt;欠陥や要因以外の因子が多くある&lt;/li&gt;
&lt;li&gt;欠陥モデルの必要性

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;誘発因子&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;その過ちを誘発させるもの&lt;/li&gt;
&lt;li&gt;誘発因子が存在すれば、開発者の能力・経験・技術力関係無しに過失が起こされやすくなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;過失因子&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;バグを生み出した人間の過ち&lt;/li&gt;
&lt;li&gt;人間の思考や判断の誤りそのもの&lt;/li&gt;
&lt;li&gt;欠陥は過失因子の集合として生まれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;増幅因子&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;過失連鎖を情調し、欠陥の混入確率を増幅させる要素&lt;/li&gt;
&lt;li&gt;環境などによる過ちを増幅させる原因(休出で誰にも聞けなかったなど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;欠陥

&lt;ul&gt;
&lt;li&gt;不具合、障害等の現象を発生させる&lt;/li&gt;
&lt;li&gt;どこでおきたか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;表現現出

&lt;ul&gt;
&lt;li&gt;欠陥によって起こされる不具合、障害&lt;/li&gt;
&lt;li&gt;何がおきたか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分析チーム&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;モデレータ

&lt;ul&gt;
&lt;li&gt;アジャイルRCAを理解しプロセスをドライブする人&lt;/li&gt;
&lt;li&gt;欠陥モデルを作成する&lt;/li&gt;
&lt;li&gt;質問、戦略を作成する&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レビューア

&lt;ul&gt;
&lt;li&gt;モデレータのファシリテーションをサポートする &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;インシデント分析ループ(イテレ1日目15分|RCA1日目&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;障害で何が起こったかを分析&lt;/li&gt;
&lt;li&gt;事実、背景、状況、起きた事だけを聞く&lt;/li&gt;
&lt;li&gt;分析は我慢する&lt;/li&gt;
&lt;li&gt;パラフレージングが有効（自分の言葉で言い換えて聞く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;探索的ループ(イテレ2日目15分|RCA2日目&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;インシデントで質問を考えておく&lt;/li&gt;
&lt;li&gt;推論をかけながら引き出していく&lt;/li&gt;
&lt;li&gt;長くても30分まで&lt;/li&gt;
&lt;li&gt;探査クループ後のモデリング

&lt;ul&gt;
&lt;li&gt;探索ループから戦略を考える&lt;/li&gt;
&lt;li&gt;モデリングをもとに次のイテレの質問を策定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠陥モデルで質問する(イテレ3日目|RCA3日目&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;欠陥モデルをチームで合意する&lt;/li&gt;
&lt;li&gt;策定した質問をベースに探索的分析ループを回す&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例(仕様チーム側のみ&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;1日目：ある実装が無い&lt;/li&gt;
&lt;li&gt;2日目：

&lt;ul&gt;
&lt;li&gt;欠陥因子⇒ドキュメントに書かれていない&lt;/li&gt;
&lt;li&gt;過失因子⇒当たり前だと思って仕様書に書かなかった&lt;/li&gt;
&lt;li&gt;仕様書を直さない⇒チームが同意しているのなら正しい&lt;/li&gt;
&lt;li&gt;過失になるなら他に書かなければいけない事が多すぎる&lt;/li&gt;
&lt;li&gt;設計と仕様担当が離れると価値判断が変わり共有がしにくい

&lt;ul&gt;
&lt;li&gt;暗黙知のコミュニケーション&lt;/li&gt;
&lt;li&gt;暗黙知の齟齬=想定外&lt;/li&gt;
&lt;li&gt;組織がでかくなると当たり前がずれてくる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3日目：

&lt;ul&gt;
&lt;li&gt;過失因子⇒価値観が違う事に気付いていない&lt;/li&gt;
&lt;li&gt;最終日

&lt;ul&gt;
&lt;li&gt;過失因子⇒振る舞いのポリシーがない&lt;/li&gt;
&lt;li&gt;暗黙知の齟齬=想定外&lt;/li&gt;
&lt;li&gt;ポリシーを作り暗黙知をサポートする&lt;/li&gt;
&lt;li&gt;離れて行く暗黙知を一つにする&lt;/li&gt;
&lt;li&gt;振る舞いの判断基準のドキュメントを作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;アジャイルRCAの効果&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;2チームで6ヶ月以上継続&lt;/li&gt;
&lt;li&gt;分析スピードが4倍以上改善&lt;/li&gt;
&lt;li&gt;チームとの信頼関係

&lt;ul&gt;
&lt;li&gt;バグは貴重な情報&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ファシリテーションの向上、品質改善のモチベーションアップ&lt;/li&gt;
&lt;li&gt;客観的に見る事が出来るようになる

&lt;ul&gt;
&lt;li&gt;ソフトウェアはバグが欠陥で、対象はエンジニア&lt;/li&gt;
&lt;li&gt;　↓&lt;/li&gt;
&lt;li&gt;ソフトウェアはバグが欠陥で、対象は欠陥モデル　　　　　&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ファシリテーションのこつ&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;欠陥に突っ込まない⇒何故と言いたくなる&lt;/li&gt;
&lt;li&gt;因子を探る

&lt;ul&gt;
&lt;li&gt;条件、状況、言い訳、愚痴をどんどん出す&lt;/li&gt;
&lt;li&gt;言った事はその場でモデルに書き込む&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;KPT&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;7つのステップ

&lt;ol&gt;
&lt;li&gt;活動を思い出す&lt;/li&gt;
&lt;li&gt;うまく行った行動を確認&lt;/li&gt;
&lt;li&gt;問題洗い出し&lt;/li&gt;
&lt;li&gt;原因を検討&lt;/li&gt;
&lt;li&gt;改善策&lt;/li&gt;
&lt;li&gt;試したい事を考える&lt;/li&gt;
&lt;li&gt;試す事を選択する&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agile RCAが貢献するところ&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;3.問題洗い出し&lt;/li&gt;
&lt;li&gt;4.原因検討&lt;/li&gt;
&lt;li&gt;5.改善策&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;アジャイルRCAは、欠陥モデルを使い複数のイテレをループさせて継続的に要因分析を改善している&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;欠陥モデルがイテレごとに進化する&lt;/li&gt;
&lt;li&gt;欠陥モデルを毎回評価し合意して改善して行く&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;RCAの課題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;モデレータが最初必要だが段々自分たちで出来るようになる&lt;/li&gt;
&lt;li&gt;知見をため情報を流通させ、未然防止活動をする&lt;/li&gt;
&lt;li&gt;モデリングのデータベース化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;チーム内の雰囲気を壊さないためにも、この手法はとても面白いと思いました。&lt;/p&gt;

&lt;p&gt;人ではなく原因を追求し、その環境やその人の経験から生まれた考えを洗い出す。&lt;/p&gt;

&lt;p&gt;継続していくことでチームを作り、思考を整理できたりと少しずつでもやってみたいなぁと思いました。&lt;/p&gt;

&lt;p&gt;発生源のパターンをイテレ時にチーム内で認知しているので、お互いにフォローが出来るのかなとも思います。&lt;/p&gt;

&lt;p&gt;知見の扱いは膨大な量になり人によっては当てはまらないものもあり、ただ時間がかかるだけになりかねないので
どう有効に扱うか考えどころだなぁ、、と思いました。&lt;/p&gt;

&lt;h2&gt;1C-2開発モデルの作り方&lt;/h2&gt;

&lt;h3&gt;守破離とは&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;守：基本&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;ルールに従え&lt;/li&gt;
&lt;li&gt;息をするようにルールを行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;破：応用&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;自分なりに工夫してみる&lt;/li&gt;
&lt;li&gt;ルールに従った上でアレンジ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;離：独自性&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;ルールを忘れろ&lt;/li&gt;
&lt;li&gt;独創的なオリジナル個性を発揮する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;語源

&lt;ul&gt;
&lt;li&gt;兵法用語&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;試行錯誤を辿り着いた破&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;例：オフショアとの開発

&lt;ul&gt;
&lt;li&gt;1度のやり取りで期待通りアウトプットが出て来ない

&lt;ul&gt;
&lt;li&gt;1度での完成をあきらめ初回ざっくり開発&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;見積もりの精度が低い

&lt;ul&gt;
&lt;li&gt;ざっくり開発工数を見積もる、完了係数を使って算出&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;95%完了から先が長い

&lt;ul&gt;
&lt;li&gt;最後の5%は日本側で完成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RFCモデル

&lt;ul&gt;
&lt;li&gt;ベースはかんばん&lt;/li&gt;
&lt;li&gt;Todo,Doing,Done&lt;/li&gt;
&lt;li&gt;DoingをR,F,Cで更に細分化&lt;/li&gt;
&lt;li&gt;Rough(Doing|Review

&lt;ul&gt;
&lt;li&gt;ざっくり開発フェーズ&lt;/li&gt;
&lt;li&gt;7割程度の完成を目指す&lt;/li&gt;
&lt;li&gt;バックログの時点で着手可能・仕様記載済みのストーリ&lt;/li&gt;
&lt;li&gt;ストーリのタスク分割時にオフショア側に工数を見積もってもらう&lt;/li&gt;
&lt;li&gt;レビューフェーズでは完成までに必要な仕様を詳細に伝える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fill(Doing|Review

&lt;ul&gt;
&lt;li&gt;9割以上の完成度を目指す&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Closing

&lt;ul&gt;
&lt;li&gt;完成フェーズ&lt;/li&gt;
&lt;li&gt;日本側のエンジニアが対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型破り開発モデルを編み出す&lt;/li&gt;
&lt;li&gt;守フェーズを終えて開発モデルを編み出す&lt;/li&gt;
&lt;li&gt;まずは型を学ぶ&lt;/li&gt;
&lt;li&gt;型を身に付けた上で、現場の改善に取り組む&lt;/li&gt;
&lt;li&gt;取り組んだ内容を体系化し、開発モデルとしてアウトプットする&lt;/li&gt;
&lt;li&gt;試守破離がおすすめ

&lt;ul&gt;
&lt;li&gt;痛い目にあってから学&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;試す＝会社に属すメリットはチャレンジができること&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trelloでかんばんをオフショアと共有、見える化 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;試守破離の考え方や、開発モデルの編み出し方にとてもしっくり来ました。&lt;/p&gt;

&lt;p&gt;手法は過去に色々な人の考えが積み重なっていて、自分が知る頃には気にする必要がないものばかりです。&lt;/p&gt;

&lt;p&gt;過去の手法を具体的に見て自分なりに解釈すると、現在の問題に当てはまるような物もあったりと、
守を習得しそれを組み合わせたり自分なりの考えも合わせて行けば
問題解決の大きな一歩となり新しい手法になるんだと感じました。&lt;/p&gt;

&lt;p&gt;守破離からまた守まで移り変わったとしてどこまで知ればいいんだって感じにはなりそうですが、、&lt;/p&gt;

&lt;p&gt;肉付けを外した根本的なものを見いだしていければと思います。&lt;/p&gt;

&lt;h2&gt;1B-3大きな組織にスクラムの輪を広げて行くために&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;作業をいかに効率化するかが中心&lt;/li&gt;
&lt;li&gt;改善は内省ベース&lt;/li&gt;
&lt;li&gt;プロセス改善は会社間レベルの活動になる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;コミュニケーションの距離が遠い&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;離れた所で見ているのではなく良い物作りに携わる&lt;/li&gt;
&lt;li&gt;遠隔地からスクラムをどう広げるのか

&lt;ul&gt;
&lt;li&gt;答えは無いけどあるあるネタはある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;パターンランゲージを作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;辺境で立ち上げる

&lt;ul&gt;
&lt;li&gt;エヴァンジェリストになり立ち上げ始める&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;離れたチームと恊働する

&lt;ul&gt;
&lt;li&gt;失敗していただく

&lt;ul&gt;
&lt;li&gt;全国にスクラム10チーム&lt;/li&gt;
&lt;li&gt;現場に任せる&lt;/li&gt;
&lt;li&gt;日々の調整などで意見交換&lt;/li&gt;
&lt;li&gt;口を出さずにチームの決断を尊重する&lt;/li&gt;
&lt;li&gt;実際にトラブルが発生する瞬間を捉え振り返る機会を用意する&lt;/li&gt;
&lt;li&gt;トラブルが発生する事を見越して関係各所と事前にねごっておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まあまあ業

&lt;ul&gt;
&lt;li&gt;早めに割って入り双方を代弁する&lt;/li&gt;
&lt;li&gt;チャットの導入で言葉が足りず誤解が生まれた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フリーキッカー

&lt;ul&gt;
&lt;li&gt;貴重なスペシャリストには思いっきり自由に動いてもらう&lt;/li&gt;
&lt;li&gt;全てのチームの全ての課題に関われるよう合意を取る&lt;/li&gt;
&lt;li&gt;フリーキッカーがチーム感の潤滑油になる&lt;/li&gt;
&lt;li&gt;良いコード、デザインが複数のチームに広がる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ガス抜き提案

&lt;ul&gt;
&lt;li&gt;スクラムチームの判断で自由にリリースできるバックロググループを定義する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;1-A4自己組織的なScrumチームの目指し方&lt;/h2&gt;

&lt;h3&gt;自己組織的&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;わくわく出来ることを探す&lt;/li&gt;
&lt;li&gt;会社の規模が大きくなると多様な意識の人が増え、方向性の共通認識を作れず組織としての課題が多い&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;事例：エンジニアコミュニティ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;社内勉強会 金曜夜に開催、その後懇親会(テーマ無し&lt;/li&gt;
&lt;li&gt;目的

&lt;ul&gt;
&lt;li&gt;社員がアウトプットする練習の場を作る&lt;/li&gt;
&lt;li&gt;社員が業務以外で集まる場を作る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プログラミングコンテスト

&lt;ul&gt;
&lt;li&gt;目的

&lt;ul&gt;
&lt;li&gt;社員の技術スキルのポートフォリオをGithubに作る&lt;/li&gt;
&lt;li&gt;問題解決のプログラムの問題を提示し、一ヶ月弱の間に各々Githubにあげる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;効果

&lt;ul&gt;
&lt;li&gt;高速化やアルゴリズムに興味が沸く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AdventCalendarなどアウトプットを促す&lt;/li&gt;
&lt;li&gt;MBB - Management by Belief

&lt;ul&gt;
&lt;li&gt;会社として期待する内容と個人の希望をすり合わせる
### 目的はなにか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己組織化プロセス - 個人

&lt;ul&gt;
&lt;li&gt;なにもできない&lt;/li&gt;
&lt;li&gt;思いを持つ&lt;/li&gt;
&lt;li&gt;入力可能&lt;/li&gt;
&lt;li&gt;出力可能&lt;/li&gt;
&lt;li&gt;自律

&lt;ul&gt;
&lt;li&gt;自分と他者で入出力&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己組織化プロセス - チーム

&lt;ul&gt;
&lt;li&gt;カオス

&lt;ul&gt;
&lt;li&gt;存在&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トップダウン

&lt;ul&gt;
&lt;li&gt;リーダに従う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;主体的

&lt;ul&gt;
&lt;li&gt;責任共有&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;共同体

&lt;ul&gt;
&lt;li&gt;ゴールの共有&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己組織的チーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自分の位置を確認する&lt;/li&gt;
&lt;li&gt;チームと自分のためにできることの指標&lt;/li&gt;
&lt;li&gt;現在の状態と目標の状態を設定するとやるべき事の可能性が見えてくる&lt;/li&gt;
&lt;li&gt;自己組織プロセスを辿るプラクティス&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;感想&lt;/h3&gt;

&lt;p&gt;仕事の中でわくわくできること探し⇒自分自身の充実、チームへの貢献&lt;/p&gt;

&lt;p&gt;チーム内で今できることを見つける指標⇒自己組織化プロセス&lt;/p&gt;

&lt;p&gt;twitterで見つけた一言で、別の部屋のセッションだと思いますが、少しリンクしたので↓&lt;/p&gt;

&lt;p&gt;「立ち上げメンバーのようなプロダクトオーナーシップを持つ事が重要」&lt;/p&gt;

&lt;p&gt;LEADERSのドラマを見た時にも感じた事。改めて意識できたのでよかった&lt;/p&gt;

&lt;h2&gt;1C-5大規模システムのスクラム実践効果と課題&lt;/h2&gt;

&lt;h3&gt;PF Scrum Team&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PF Scrum 現場レポート

&lt;ul&gt;
&lt;li&gt;アプリ自動ビルド配信チーム&lt;/li&gt;
&lt;li&gt;WHY

&lt;ul&gt;
&lt;li&gt;大規模になるにつれてリソース、専門スキルが必要になって来た&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Changed

&lt;ul&gt;
&lt;li&gt;脱属人化のためにやったこと

&lt;ul&gt;
&lt;li&gt;やる事やらない事を明確にした&lt;/li&gt;
&lt;li&gt;メンバーで合意する形式にした&lt;/li&gt;
&lt;li&gt;ストーリー完了のために、作業が開発チームで共通認識し誰でもタスクアサインできるようになった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;職種を横断したスキルUPのためにやったこと

&lt;ul&gt;
&lt;li&gt;1ストーリーに誰でも手を出せるタスクを造り誰でも担当できるようにルール化した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プロジェクトに対する意識の向上

&lt;ul&gt;
&lt;li&gt;SprintPlanning、リファイメントに全員で参加&lt;/li&gt;
&lt;li&gt;プロジェクトの将来や現状、方向性が共有できた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unchanged

&lt;ul&gt;
&lt;li&gt;ウォータフォールなPBL

&lt;ul&gt;
&lt;li&gt;プロジェクトのKGIを決めKPIを意識しPBI作成、リファイメントする&lt;/li&gt;
&lt;li&gt;決まった仮説、アイデアはとことんアジャイル、小さく早く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Swtich Scrum&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スクラムマスターを他のチームと入れ替える

&lt;ul&gt;
&lt;li&gt;他のチームのスクラムを体験し良い所を知る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タスクボードルール

&lt;ul&gt;
&lt;li&gt;色を分けて見積もりのズレを可視化する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SMファシリテーション

&lt;ul&gt;
&lt;li&gt;ルールを守れていたら削除して増えすぎないように工夫をする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;まとめ&lt;/h3&gt;

&lt;p&gt;5つのセッションを聞いて来ました。&lt;/p&gt;

&lt;p&gt;レポートとしては、感想書いてなかったり内容書ききれて無く申し訳ない感がありますが、、(講演者名など一応出してませんが出した方がいいんでしょうか&amp;hellip;&lt;/p&gt;

&lt;p&gt;自分の位置から何ができるのか、どういったやり方があるのかなど事例・例など聞けてこれを今後どう生かして行くか考えられるとても良い経験となりました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Frontrend Conference 2015/2/21</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/02/24/article.html"/>
    <id>http://blog.url.com/blog/2015/02/24/article.html</id>
    <published>2015-02-23T15:00:00Z</published>
    <updated>2015-02-24T03:03:51+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Frontrend Conferenceに行って来ました。&lt;/p&gt;

&lt;p&gt;久しぶりにHTML5やJavaScriptの事が学べて楽しかったです。&lt;/p&gt;

&lt;p&gt;自分なりに理解がしたくまとめます、セミナー以外で聞いた内容も書いてます。&lt;/p&gt;

&lt;p&gt;webがシーラカンス状態だったと以前セミナーで聞いたのを思い出したけど、もう4年前の事だった&amp;hellip;&lt;/p&gt;

&lt;p&gt;歴史の積み重ねのスピードに本当に驚く&lt;/p&gt;

&lt;p&gt;CSSも聞きに行きたかったんですが、動くのが面倒でずっとJavaScriptの部屋にいました(&amp;lsquo;・_・`)&lt;/p&gt;

&lt;h2&gt;Pragmatic Front-end Developer: From Artisan to Expert&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML,CSS,JavaScriptは、専門的な知識が無くても手軽に書けてしまう&lt;/li&gt;
&lt;li&gt;メンテナンスがしやすいとは言えない&lt;/li&gt;
&lt;li&gt;多くの開発者が居ても1人で書いたように見えるコードを意識する&lt;/li&gt;
&lt;li&gt;言語そのものが変わろうとしていて、方法論やツールも存在する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;コードスタイルガイドライン&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDIOMATIC.JS&lt;/li&gt;
&lt;li&gt;JQUERY CORE&lt;/li&gt;
&lt;li&gt;AIRBNB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IDOMATIC.css&lt;/li&gt;
&lt;li&gt;Sass GuideLine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;問題は人と人の間にある&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;運用の継続&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;スタイルガイドに沿ったコードを継続させるためのツール&lt;/li&gt;
&lt;li&gt;EDITORCONFIG

&lt;ul&gt;
&lt;li&gt;エディタをまたいでフォーマットを統一(改行コード、文字コード、インデント&lt;/li&gt;
&lt;li&gt;プログラムを正しく動作させることにのみ特化(補完辞書やカラーリングなどは共有しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSCS

&lt;ul&gt;
&lt;li&gt;コードスタイルに特化したLINT&lt;/li&gt;
&lt;li&gt;JQERY COREなどに対応&lt;/li&gt;
&lt;li&gt;エラーチェックする内容が細かく設定でき、自社のコーディング標準に合わせたチェックも出来る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSS LINT&lt;/li&gt;
&lt;li&gt;CSS COMB

&lt;ul&gt;
&lt;li&gt;整形ツール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大切なのはコードレビューの自動化

&lt;ul&gt;
&lt;li&gt;レビュー時間にコードスタイルのチェックを含めさせない&lt;/li&gt;
&lt;li&gt;なぜその実装、コードを書いたのかに対しての議論に集中させる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;ドキュメンテーションは嘘をつく&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントの運用を継続させるためのツール&lt;/li&gt;
&lt;li&gt;スタイルガイド生成ツール

&lt;ul&gt;
&lt;li&gt;KSS

&lt;ul&gt;
&lt;li&gt;ここから色々なツールが増えて行った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KSS-NODE&lt;/li&gt;
&lt;li&gt;HOROGRAM&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ドキュメンテーションは変化が激しくそこを補うためにツールを使う&lt;/li&gt;
&lt;li&gt;コードのコメントを書きそこからドキュメンテーションを生成する&lt;/li&gt;
&lt;li&gt;PROTOTYPE

&lt;ul&gt;
&lt;li&gt;ソフトウェア開発の哲学

&lt;ul&gt;
&lt;li&gt;プロトタイプを早く作る&lt;/li&gt;
&lt;li&gt;実際に見えるもの、動くものに対して意見は言いやすい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TOOL

&lt;ul&gt;
&lt;li&gt;BROWSERSYNC&lt;/li&gt;
&lt;li&gt;複数ブラウザに動作を反映できる&lt;/li&gt;
&lt;li&gt;エミュレータも可&lt;/li&gt;
&lt;li&gt;JS BIN&lt;/li&gt;
&lt;li&gt;CHOROME CANARY&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;変化に対し寛容に&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;プログレッシブエンハンスメント

&lt;ul&gt;
&lt;li&gt;エスカレーターは普段自動に動くが壊れて止まっても階段として機能する&lt;/li&gt;
&lt;li&gt;webはプラットフォームではなく連続性がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CUT THE MUSTARD

&lt;ul&gt;
&lt;li&gt;GRADE COMPONENTS NOT BROWSERS

&lt;ul&gt;
&lt;li&gt;コンポーネント毎にブラウザ判定し体験レイヤーを分ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンポーネント単体における体験の定義&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PERFORMANCE

&lt;ul&gt;
&lt;li&gt;ISOMORPHIC JAVASCRIPT

&lt;ul&gt;
&lt;li&gt;isomorphic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;REACT-CANVAS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;壊れ窓理論

&lt;ul&gt;
&lt;li&gt;壊れ窓の中で仕事をしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Reactive Programming in JavaScript&lt;/h2&gt;

&lt;h3&gt;Reactiveプログラミングとは&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクト指向、関数型などのプログラミングパラダイムの一つ&lt;/li&gt;
&lt;li&gt;イベントや値の関係性に注目したパラダイム&lt;/li&gt;
&lt;li&gt;RP界隈はノイズが多い&lt;/li&gt;
&lt;li&gt;ActorModel

&lt;ul&gt;
&lt;li&gt;並列分散処理システムにおける数学モデル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Functional Reacitive

&lt;ul&gt;
&lt;li&gt;関数型のパラダイムを取り込んだRP&lt;/li&gt;
&lt;li&gt;GUI開発で主流なのはこっち方面&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Reactive Manifesto&lt;/li&gt;
&lt;li&gt;Reactive Streams&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Javascriptに落とし込む&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JavaScriptでUIを操作

&lt;ul&gt;
&lt;li&gt;非同期で都度反映するコードを書くのは怠い&lt;/li&gt;
&lt;li&gt;Reactiveな仕組みが自然と求められる&lt;/li&gt;
&lt;li&gt;これまでのJavaScriptに見られるReactive

&lt;ul&gt;
&lt;li&gt;Reactive・・・片方の変化を他方に自動で伝播する仕組み&lt;/li&gt;
&lt;li&gt;Observerパターンは初歩的な解決の一つ

&lt;ul&gt;
&lt;li&gt;Reactive的にはObserverを隠蔽して宣言したい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データバインディングは局所的なReactive&lt;/li&gt;
&lt;li&gt;React with FluxはReactiveなデータフロー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;これまでの抵抗

&lt;ul&gt;
&lt;li&gt;promise・・・クリックの用に離散的なイベントは扱えない&lt;/li&gt;
&lt;li&gt;データバインディング・・・viewとModelを結びつけるだけの局所的Reactive&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FRP・・・すべて同じように扱いなんでもReactiveに

&lt;ul&gt;
&lt;li&gt;関数型プログラミング + Reactiveプログラミング&lt;/li&gt;
&lt;li&gt;Reactive-Extensionシリーズ(ライブラリ&lt;/li&gt;
&lt;li&gt;RxJS

&lt;ul&gt;
&lt;li&gt;全ての値や入力を非同期データストリームとして見なす

&lt;ul&gt;
&lt;li&gt;ストリームをリストと見なす事で関数型のイディオムを生かせるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mapやfilterなどの高階関数で処理を適用&lt;/li&gt;
&lt;li&gt;非同期データストリームを中心にその繋がりと処理を記述&lt;/li&gt;
&lt;li&gt;クライアントサイドの処理は時間軸の変化に依存する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RxJSサンプルおさらい

&lt;ul&gt;
&lt;li&gt;ストリームの定義&lt;/li&gt;
&lt;li&gt;ストリームをマージ、一つのストリームになる&lt;/li&gt;
&lt;li&gt;ストリームから値がくるとcurrentを計算&lt;/li&gt;
&lt;li&gt;currentの変更をsubscribeして更新&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;RPはデータフローの関係性を宣言&lt;/li&gt;
&lt;li&gt;FRPは非同期データストリームを扱うモデル&lt;/li&gt;
&lt;li&gt;RxJSはObservableを制すれば勝てる&lt;/li&gt;
&lt;li&gt;Bacon.jsおすすめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;hot,coldを理解する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introduction to React&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React.js

&lt;ul&gt;
&lt;li&gt;facebook製のライブラリ&lt;/li&gt;
&lt;li&gt;viewを担当するライブラリ&lt;/li&gt;
&lt;li&gt;ステートレスなコンポーネント設計&lt;/li&gt;
&lt;li&gt;VirtualDOMの採用&lt;/li&gt;
&lt;li&gt;JSXシンタックス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VirtualDOM

&lt;ul&gt;
&lt;li&gt;jQuery

&lt;ul&gt;
&lt;li&gt;状態がDOMにしか存在しないのは拡張がし辛い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Backbonjs・・・イベント地獄&lt;/li&gt;
&lt;li&gt;Angular,Vue

&lt;ul&gt;
&lt;li&gt;コンポーネント毎に状態をもつつらさ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;React

&lt;ul&gt;
&lt;li&gt;コンポーネントに状態を持たせない&lt;/li&gt;
&lt;li&gt;親にだけステートを持たせる&lt;/li&gt;
&lt;li&gt;子には極力持たせない、全て親から貰いレンダリングさせる&lt;/li&gt;
&lt;li&gt;親が子に変更を反映させる&lt;/li&gt;
&lt;li&gt;サーバーサイドと同じ考え方

&lt;ul&gt;
&lt;li&gt;データを基にviewを構築&lt;/li&gt;
&lt;li&gt;ユーザアクション&lt;/li&gt;
&lt;li&gt;まるっとデータを更新しviewを再構築&lt;/li&gt;
&lt;li&gt;速度とのジレンマ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VirtualDom

&lt;ul&gt;
&lt;li&gt;JSのオブジェクトとしてDOMのような構造をもつ&lt;/li&gt;
&lt;li&gt;差分とれ必要な部分だけ実際のDOMに適用ができる&lt;/li&gt;
&lt;li&gt;Reactは設計と速度が両立できる

&lt;ul&gt;
&lt;li&gt;Backboneで部分的再描画 564ms&lt;/li&gt;
&lt;li&gt;Backboneで全て再描画 5,877ms&lt;/li&gt;
&lt;li&gt;Rect 1,837ms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSX

&lt;ul&gt;
&lt;li&gt;仮想DOMに対応しているテンプレートエンジン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flux

&lt;ul&gt;
&lt;li&gt;設計手法&lt;/li&gt;
&lt;li&gt;データの流れが一方通行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flow

&lt;ul&gt;
&lt;li&gt;型解釈&lt;/li&gt;
&lt;li&gt;高機能lint&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lightning Talks&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UIコンポーネント

&lt;ul&gt;
&lt;li&gt;Gillgamesh

&lt;ul&gt;
&lt;li&gt;Jsフレームワークを拡張するライブラリ

&lt;ul&gt;
&lt;li&gt;予期できなかった必要な汎用性を助けてくれるライブラリ&lt;/li&gt;
&lt;li&gt;Anglurが対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API Test with Service Worker

&lt;ul&gt;
&lt;li&gt;Service Worker

&lt;ul&gt;
&lt;li&gt;ローカルプロキシ不要でJSで完結するテストの実現&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introduction to ServiceWorker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Webを取り巻く環境の進化

&lt;ul&gt;
&lt;li&gt;オフラインファーストとは

&lt;ul&gt;
&lt;li&gt;オフラインを前提にWebアプリを作る事&lt;/li&gt;
&lt;li&gt;環境に対してサポートできる&lt;/li&gt;
&lt;li&gt;リアルタイム性を要求されるアプリには不向き&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オフラインWEBを実現するための技術&lt;/li&gt;
&lt;li&gt;ネイティブの振る舞いに近づく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;navigator.onLine

&lt;ul&gt;
&lt;li&gt;オンラインかどうか取得&lt;/li&gt;
&lt;li&gt;online/offlineイベント&lt;/li&gt;
&lt;li&gt;ブラウザサポートもほぼ完了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FileSystem

&lt;ul&gt;
&lt;li&gt;大きなサイズのファイル保存向け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Web Storage

&lt;ul&gt;
&lt;li&gt;セッションストレージ、ローカルストレージ&lt;/li&gt;
&lt;li&gt;少量のデータ前提&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;indexedDB

&lt;ul&gt;
&lt;li&gt;Key-Value形式でデータを保存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Application Cache

&lt;ul&gt;
&lt;li&gt;マニフェストにキャッシュを定義&lt;/li&gt;
&lt;li&gt;キャッシュを細やかにコントロールできない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Service Worker

&lt;ul&gt;
&lt;li&gt;ローカルプロキシのようなもの&lt;/li&gt;
&lt;li&gt;HTTPリクエストの検知と改竄&lt;/li&gt;
&lt;li&gt;FetchAPIを使ったリソースの取得&lt;/li&gt;
&lt;li&gt;CacheAPIを使ったキャッシュの管理&lt;/li&gt;
&lt;li&gt;バックグラウンド同期(Background Sync&lt;/li&gt;
&lt;li&gt;サーバープッシュ受信(Web Push API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fetch API

&lt;ul&gt;
&lt;li&gt;リソース取得の新たなAPI&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cache API

&lt;ul&gt;
&lt;li&gt;キャッシュのコントロールができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Background Sync

&lt;ul&gt;
&lt;li&gt;バックグラウンド同期&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Web Push API

&lt;ul&gt;
&lt;li&gt;webでもpush通知可能に&lt;/li&gt;
&lt;li&gt;HTTPSが必須

&lt;ul&gt;
&lt;li&gt;開発はローカルホスト&lt;/li&gt;
&lt;li&gt;配信はSSL前提&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;JavaScriptテストの疑問、お答えします。&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;手動テストにも価値はある&lt;/li&gt;
&lt;li&gt;費用対効果の検討は必要&lt;/li&gt;
&lt;li&gt;不安だと思う所をテスト対象にする&lt;/li&gt;
&lt;li&gt;テストとは不安に対向するための手法&lt;/li&gt;
&lt;li&gt;テストを考慮していないコードに対してユニットテストを書くのは難易度が高い&lt;/li&gt;
&lt;li&gt;E2Eテストフレームワーク

&lt;ul&gt;
&lt;li&gt;ターゲットコードの品質に依存しないテストが可能になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テストを書く文化

&lt;ul&gt;
&lt;li&gt;技術的な問題より文化的な問題のほうが対応が難しい&lt;/li&gt;
&lt;li&gt;すでに文化があるなら導入は難しくない&lt;/li&gt;
&lt;li&gt;最初は不安の可視化から&lt;/li&gt;
&lt;li&gt;その不安を解消するための対応をする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;MochaかJasmineから始める&lt;/li&gt;
&lt;li&gt;テストランナーはtestemで始めるのが簡単だけど、でかくならならkarmaがいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Styling Atom (Editor)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Atom Shell&lt;/li&gt;
&lt;li&gt;GitHub製のエディタ&lt;/li&gt;
&lt;li&gt;Atomの見た目はCSSで変更できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだ書き足りないところは多くあるんですが、(理解不足のところ調べたい)
一旦ここまでにします.また追記します&lt;/p&gt;

&lt;p&gt;RxJSとRect、VirtualDomは一度実際触れておきたい&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>今年と来年 / 2014.</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/12/26/news01_article.html"/>
    <id>http://blog.url.com/blog/2014/12/26/news01_article.html</id>
    <published>2014-12-25T15:00:00Z</published>
    <updated>2015-02-24T02:52:08+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;はじめに&lt;/h2&gt;

&lt;p&gt;文章より図で表現することのが多いんですが..&lt;br&gt;
今年最後に気持ちまとめ&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;今年&lt;/h2&gt;

&lt;p&gt;9月までは前職で所属も変わったこともありiOSやHTML5API、サーバー構築とか&lt;br&gt;
新しいことをたくさんやらせてもらえてました。&lt;br&gt;
会社自体たくさんのことに挑戦していて、入社する時は思っても見なかった経験がいくつかあったと思います。&lt;br&gt;
ただその時に色々思ったことがあり、転職の大きな理由にもなります。&lt;/p&gt;

&lt;h3&gt;転職理由&lt;/h3&gt;

&lt;p&gt;ネットワークやサーバー、データベース、歴史などの知識の欠落が大きいことへの不安を覚えた事です。&lt;/p&gt;

&lt;p&gt;今までと職種が違うといえば理由になりますが、&lt;br&gt;
今後個人制作をしていく上で知っておきたいし、フレームワークやツールを使う上で、&lt;br&gt;
ある程度何をしているか分かるようになりたいと思いました。&lt;br&gt;
あと移り変わりにくいであろう必要な知識をカバーしたかったのもあります。&lt;br&gt;
前職は新しい方へ向いていたけど、私はどちらかと言うと振り返りたい気持ちでした。&lt;/p&gt;

&lt;h3&gt;転職へ&lt;/h3&gt;

&lt;p&gt;そこで結構いきなりですが、フロントエンドからバックエンドへと会社も変わり、転職しました。&lt;br&gt;
データを多く扱い通信も多いゲーム業界を選びました。&lt;br&gt;
正直初心者と言えるレベルですが、面接で必死に語ったら受け入れて下さりとても嬉しかったです。&lt;/p&gt;

&lt;h3&gt;新生活&lt;/h3&gt;

&lt;p&gt;そんなこんなで新たな場所での生活が始まりました。&lt;br&gt;
初の上京、一人暮らしです！&lt;br&gt;
今年一番成長したのは料理ではないかと思います←&lt;br&gt;
最後に作った料理が家庭科で作ったやつともう言えなくなりました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;仕事の面ではやはりバックエンドメインというのは初めてで &lt;br&gt;
教わることが多くすごく楽しいです。&lt;br&gt;
残業が少ないところなので自分の時間が多く、&lt;br&gt;
趣味に時間を多く使えるのが凄く&amp;hellip;いいです&lt;br&gt;
その時間でフロントエンドや自分が作りたいものに必要なツールとか&lt;br&gt;
別の軸で勉強ができそれが仕事に活かせたら良いなと思ってます。&lt;/p&gt;

&lt;h2&gt;来年&lt;/h2&gt;

&lt;p&gt;目標です、今年は成長する土台を作れたのかな..と思ってます。&lt;br&gt;
来年はその上で基礎を固めたいと思います。個人ではもう突き進むのみでｓ&lt;/p&gt;

&lt;h3&gt;仕事の面&lt;/h3&gt;

&lt;p&gt;UNIX,DBをもろもろ勉強してコマンドやサーバー構築とか！曖昧じゃなくてちゃんと出来るようになりたいです。&lt;br&gt;
年末年始は、上司が教えてくれた&lt;a href="http://www.amazon.co.jp/dp/4839909555/ref=cm_sw_r_tw_dp_gKFMub12EKG8G&amp;quot;「萌え萌えうにっくす!」&amp;quot;"&gt;「萌え萌えうにっくす!」&lt;/a&gt;を
熟読しようと..&lt;br&gt;
後&lt;a href="http://www.amazon.co.jp/dp/4797373512/ref=cm_sw_r_tw_dp_sSFMub154VHXJ&amp;quot;「インフラ/ネットワークエンジニアのためのネットワーク技術&amp;amp;設計入門」&amp;quot;"&gt;これも&lt;/a&gt;買ったのでやる&lt;/p&gt;

&lt;h3&gt;個人の面&lt;/h3&gt;

&lt;p&gt;どこかのイベントでグッズ売りたいです←&lt;br&gt;
廃墟のイラスト溜まってきたんで画集作りたi..表紙描きたいなぁ..&lt;br&gt;
モデリングも背景あたり作れるようにﾝｺﾞｺﾞ&amp;hellip;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;お絵かきchatサービスも完成までは行けない気がするけど、
バグありつつも遊べるぐらいには進めれたらなと思います。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;絵もツールや作成手順、パースとかの知識で描く速度やクオリティが変わってくるので、
わりと勉強モードになりつつあります&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;なんか今年振り返ると色々変わったなと思いつつ、&lt;br&gt;
締めの気持ちで書いてみました。&lt;br&gt;
今年やったんだから来年もっとがんばれよ！という気持ちで目標プラスで..&lt;br&gt;&lt;/p&gt;

&lt;p&gt;来年もよろしくお願いいたします。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>最近の事</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/09/12/news01_article.html"/>
    <id>http://blog.url.com/blog/2014/09/12/news01_article.html</id>
    <published>2014-09-11T15:00:00Z</published>
    <updated>2014-09-13T03:14:23+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;ぷちお知らせ&lt;/h2&gt;

&lt;p&gt;ようやくアプリが一通りできたころにiPhone6とかswiftとか&lt;br&gt;
色々対応しきれなくなってきたので、今まで作ってたiPhoneアプリは、&lt;br&gt;
TestFlightのみで気になる方にのみ配信しようかな..と思います。&lt;br&gt;
もし触ってみたい方居ましたらtwitterのDMでご連絡お願いします！&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Twitter : &lt;a href="https://twitter.com/shiriweb"&gt;shiriweb&lt;/a&gt;&lt;/h4&gt;

&lt;h2&gt;アプリについて&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タイトル

&lt;ul&gt;
&lt;li&gt;CREATEBOOK&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;概要

&lt;ul&gt;
&lt;li&gt;自分の作品をアプリにアップしアルバムが作成出来ます。&lt;/li&gt;
&lt;li&gt;アルバム内の写真1枚1枚に音楽を付ける事ができます。&lt;/li&gt;
&lt;li&gt;プレビュー時に音楽とともに作品を閲覧できるサウンドフォトアルバムとなっています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;曲について

&lt;ul&gt;
&lt;li&gt;お借りした曲のためアプリ内の使用以外は禁止いたします。&lt;/li&gt;
&lt;li&gt;((iTunesのライブラリ余裕できたら使いたい&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データについて

&lt;ul&gt;
&lt;li&gt;全てアプリ内に保存されているため、一切サーバーと通信することはありません。&lt;/li&gt;
&lt;li&gt;オフライン状況でもご利用いただけます。&lt;/li&gt;
&lt;li&gt;((もっとサービス的に扱う場合は必要になってくるかもですね、、&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;入っているサンプル作品について

&lt;ul&gt;
&lt;li&gt;こちらは私の作品になりますが、個人の範囲でなら自由に使ってください(多分居ないと思うけど&amp;hellip;&lt;/li&gt;
&lt;li&gt;twitterなどにご連絡いただければ返信します&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不具合について

&lt;ul&gt;
&lt;li&gt;まだバグがあると思うので、報告していただけたらと思います&amp;hellip;&lt;/li&gt;
&lt;li&gt;そこでアプリが進化してきたらストアにもっていきたい&amp;hellip;ぼそ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="createbook" src="/blog/2014/09/12/news01_article/createbook_image.png" /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;最近&lt;/h2&gt;

&lt;p&gt;個人的な事ですが、転職しまして上京しました。&lt;br&gt;
そこでずっと前からやろうと思ってたお絵描きサービスの&lt;br&gt;
リニューアルも再開したので、早い段階でベータ版ぐらいに持って行きたいです&amp;hellip;ね&lt;br&gt;
機能追加だけでなく開発フローも一気にやりたかった事を取り入れてるので、&lt;br&gt;
盛りだくさんな感じです。&lt;br&gt;
大体ここまで出来てたのでそれをsailsに移行中。。&lt;/p&gt;

&lt;p&gt;&lt;img alt="colors" src="/blog/2014/09/12/news01_article/colors_image.png" /&gt;&lt;/p&gt;

&lt;hr&gt;
</content>
  </entry>
  <entry>
    <title>ゲストイラスト描かせていただきました(C86)</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/08/16/c86_article.html"/>
    <id>http://blog.url.com/blog/2014/08/16/c86_article.html</id>
    <published>2014-08-15T15:00:00Z</published>
    <updated>2014-08-16T23:33:24+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;C86ゲストイラストで参加しました！&lt;/h2&gt;

&lt;p&gt;とめかみ氏、快く参加OKしてくださりありがとうございました！&lt;/p&gt;

&lt;p&gt;以下から詳細見れます。&lt;/p&gt;

&lt;p&gt;&lt;a title="【C86】ゲストイラスト" href="http://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=45398846"&gt;カラー版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title="【C86】新刊予定：嫉妬禁猟区外【8/16東6-チ43b】" href="http://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=45141135"&gt;とめかみさん新刊&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次ぐらいに創作本で自分も参加できたらなーとか思ってます。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ラズベリーパイ無線LAN設定</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/05/06/third_article.html"/>
    <id>http://blog.url.com/blog/2014/05/06/third_article.html</id>
    <published>2014-05-05T15:00:00Z</published>
    <updated>2014-09-13T02:58:59+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;&lt;a name="00"&gt;はじめに&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;女子力アップを計らいラズベリーパイセッティング&lt;/p&gt;

&lt;p&gt;目的はサーバの練習と、&lt;/p&gt;

&lt;p&gt;会社でLED使用したインスタレーションを見せられ、どうやって作るのか
聞かれ全く分からなかった(((((爆)ので調べてみたら&lt;/p&gt;

&lt;p&gt;nodeとラズベリーパイでLED光らせているのを発見し無謀ながら個人的に挑戦。  &lt;/p&gt;

&lt;p&gt;以下2点をまず挑戦したいなぁという感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サーバの練習&lt;/li&gt;
&lt;li&gt;LED制御&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今日は無線LAN接続までやります。&lt;/p&gt;

&lt;h2&gt;&lt;a name="01"&gt;目次&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="#02"&gt;OSインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="#03"&gt;セットアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="#04"&gt;無線LAN設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a name="02"&gt;OSインストール&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;とりあえず&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有線型キーボード&lt;/li&gt;
&lt;li&gt;有線型マウス&lt;/li&gt;
&lt;li&gt;電源コード&lt;/li&gt;
&lt;li&gt;HDMI&lt;/li&gt;
&lt;li&gt;SDカード&lt;/li&gt;
&lt;li&gt;イーサネットケーブル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記を挿入や接続し、ラズベリーパイをもの凄い勢いで変化させます。&lt;/p&gt;

&lt;h2&gt;&lt;a name="03"&gt;セットアップ&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;モニタに繋ぐとOS選択の画面が出てくるので
「Raspbian」を選択肢インストール。&lt;/li&gt;
&lt;li&gt;長いインストール後に「Set Options」の画面が出るので必要に応じて設定。

&lt;ul&gt;
&lt;li&gt;後で記載する参考サイトの真似をしました。&lt;/li&gt;
&lt;li&gt;sudo raspi-configで再度設定できます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;a name="04"&gt;無線LAN設定&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;マウスを使っていない事に気づき、無線LANアダプタを代わりに接続。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下記に移動し、

&lt;ul&gt;
&lt;li&gt;cd /etc/wpa_supplicant&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下記コマンドからPreSharedKeyを作成。

&lt;ul&gt;
&lt;li&gt;wpa&lt;em&gt;passphrase SSID名 パスワード &amp;gt; wpa&lt;/em&gt;supplicant.conf&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;開くと設定が追加されているので、必要に応じて追記などする。※参考サイトが分かりやすいです&lt;/li&gt;
&lt;li&gt;下記で無線インターフェースの設定をする。

&lt;ul&gt;
&lt;li&gt;/etc/network/interfaces&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;参考サイト&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gerolian.com/2014/04/30/1159/"&gt;げろりんさん&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youchikurin.com/blog/2007/06/linuxlan_1.html"&gt;Linuxで無線LAN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a name="03-01"&gt;ネットワーク再起動&lt;/a&gt;&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;sudo /etc/init.d/networking restart&lt;br&gt;&lt;/li&gt;
&lt;li&gt;状態の確認。

&lt;ul&gt;
&lt;li&gt;iwconfig wlan0&lt;/li&gt;
&lt;li&gt;ifconfig wlan0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;確認で出てくる「inet addr:★」の、★の所にIPが表示されれば大丈夫です。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;次回はSSH接続から進めます！&lt;/p&gt;
</content>
  </entry>
</feed>
